id: 27d078f8-e515-4cfc-83d7-30ab49a8b38e
version: 44
vcShouldKeepItemLegacyProdMachine: false
name: CloudConvert
starttaskid: "0"
tasks:
  "0":
    id: "0"
    taskid: 0b8fdf08-4822-4008-8ace-f847f6212f89
    type: start
    task:
      id: 0b8fdf08-4822-4008-8ace-f847f6212f89
      version: -1
      name: ""
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "3"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": -120
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "1":
    id: "1"
    taskid: a17b1e57-785d-499e-8ae3-a14478c74448
    type: regular
    task:
      id: a17b1e57-785d-499e-8ae3-a14478c74448
      version: -1
      name: CloudConvert-import
      script: CloudConvert|||CloudConvert-import
      type: regular
      iscommand: true
      brand: CloudConvert
    nexttasks:
      '#none#':
      - "2"
    scriptarguments:
      entry_id:
        simple: ${inputs.entry_id}
      file_name: {}
      url: {}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": 190
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "2":
    id: "2"
    taskid: 39225273-a191-49f2-84b5-830e7d95e5e4
    type: playbook
    task:
      id: 39225273-a191-49f2-84b5-830e7d95e5e4
      version: -1
      name: GenericPolling
      description: |-
        Use this playbook as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continuously running the command in Step \#2 until the operation completes.
        The remote action should have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      playbookName: GenericPolling
      type: playbook
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "4"
    scriptarguments:
      AdditionalPollingCommandArgNames: {}
      AdditionalPollingCommandArgValues: {}
      Ids:
        simple: ${CloudConvert.Task.id}
      Interval:
        simple: "1"
      PollingCommandArgName:
        simple: task_id
      PollingCommandName:
        simple: CloudConvert-checkstatus
      Timeout:
        simple: "10"
      dt:
        simple: CloudConvert.Task(val.status != 'finished').id
    separatecontext: true
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
      max: 100
    view: |-
      {
        "position": {
          "x": 450,
          "y": 390
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "3":
    id: "3"
    taskid: f92eb9a0-6a4c-40f4-8c73-178e1b0a594d
    type: regular
    task:
      id: f92eb9a0-6a4c-40f4-8c73-178e1b0a594d
      version: -1
      name: deletecontext
      description: Delete field from context
      scriptName: DeleteContext
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "1"
    scriptarguments:
      all:
        simple: "yes"
      index: {}
      key: {}
      keysToKeep: {}
      subplaybook: {}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": 30
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "4":
    id: "4"
    taskid: f8e03d17-b4ea-4f9a-82bf-8e957e9f7e24
    type: regular
    task:
      id: f8e03d17-b4ea-4f9a-82bf-8e957e9f7e24
      version: -1
      name: CloudConvert-convert
      script: CloudConvert|||CloudConvert-convert
      type: regular
      iscommand: true
      brand: CloudConvert
    nexttasks:
      '#none#':
      - "5"
    scriptarguments:
      output_format:
        simple: ${inputs.output format}
      task_id:
        simple: ${CloudConvert.Task.id}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": 590
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "5":
    id: "5"
    taskid: c040e3ee-937c-4099-87a0-8cd9693b8e8b
    type: playbook
    task:
      id: c040e3ee-937c-4099-87a0-8cd9693b8e8b
      version: -1
      name: GenericPolling
      description: |-
        Use this playbook as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continuously running the command in Step \#2 until the operation completes.
        The remote action should have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      playbookName: GenericPolling
      type: playbook
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "6"
    scriptarguments:
      AdditionalPollingCommandArgNames: {}
      AdditionalPollingCommandArgValues: {}
      Ids:
        complex:
          root: CloudConvert.Task
          filters:
          - - operator: isEqualString
              left:
                value:
                  simple: CloudConvert.Task.operation
                iscontext: true
              right:
                value:
                  simple: convert
          accessor: id
      Interval:
        simple: "1"
      PollingCommandArgName:
        simple: task_id
      PollingCommandName:
        simple: CloudConvert-checkstatus
      Timeout:
        simple: "10"
      dt:
        simple: CloudConvert.Task(val.status!='finished').id
    separatecontext: true
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
      max: 0
    view: |-
      {
        "position": {
          "x": 450,
          "y": 770
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "6":
    id: "6"
    taskid: 1b6afc3a-2401-4226-8624-b93e0ff15372
    type: regular
    task:
      id: 1b6afc3a-2401-4226-8624-b93e0ff15372
      version: -1
      name: CloudConvert-export
      script: CloudConvert|||CloudConvert-export
      type: regular
      iscommand: true
      brand: CloudConvert
    nexttasks:
      '#none#':
      - "10"
    scriptarguments:
      export_as:
        simple: url
      task_id:
        complex:
          root: CloudConvert.Task
          filters:
          - - operator: isEqualString
              left:
                value:
                  simple: CloudConvert.Task.operation
                iscontext: true
              right:
                value:
                  simple: convert
          accessor: id
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": 940
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "10":
    id: "10"
    taskid: 5fc8e174-11fb-454a-8bc3-77b87947941c
    type: playbook
    task:
      id: 5fc8e174-11fb-454a-8bc3-77b87947941c
      version: -1
      name: GenericPolling
      description: |-
        Use this playbook as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continuously running the command in Step \#2 until the operation completes.
        The remote action should have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      playbookName: GenericPolling
      type: playbook
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "11"
    scriptarguments:
      AdditionalPollingCommandArgNames:
        simple: is_entry
      AdditionalPollingCommandArgValues:
        simple: "False"
      Ids:
        complex:
          root: CloudConvert.Task
          filters:
          - - operator: isEqualString
              left:
                value:
                  simple: CloudConvert.Task.operation
                iscontext: true
              right:
                value:
                  simple: export/url
          accessor: id
      Interval:
        simple: "1"
      PollingCommandArgName:
        simple: task_id
      PollingCommandName:
        simple: CloudConvert-checkstatus
      Timeout:
        simple: "10"
      dt:
        simple: CloudConvert.Task(vel.status != 'finished').id
    separatecontext: true
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
      max: 100
    view: |-
      {
        "position": {
          "x": 450,
          "y": 1075
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "11":
    id: "11"
    taskid: 873d6516-83de-42a3-844d-eaca9a91b798
    type: regular
    task:
      id: 873d6516-83de-42a3-844d-eaca9a91b798
      version: -1
      name: CloudConvert-checkstatus
      script: CloudConvert|||CloudConvert-checkstatus
      type: regular
      iscommand: true
      brand: CloudConvert
    scriptarguments:
      is_entry:
        complex:
          root: inputs.export via
          transformers:
          - operator: If-Then-Else
            args:
              else:
                value:
                  simple: "False"
              equals:
                value:
                  simple: entry
              then:
                value:
                  simple: "True"
      task_id:
        simple: ${CloudConvert.Task.id}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": 1240
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
view: |-
  {
    "linkLabelsPosition": {},
    "paper": {
      "dimensions": {
        "height": 1455,
        "width": 380,
        "x": 450,
        "y": -120
      }
    }
  }
inputs:
- key: url
  value: {}
  required: false
  description: This is the url of the imported file
  playbookInputQuery: null
- key: entry_id
  value:
    simple: 314@2
  required: false
  description: This is the entry id of the imported file
  playbookInputQuery: null
- key: output format
  value:
    simple: jpg
  required: true
  description: |
    This is the desired output format
  playbookInputQuery: null
- key: export via
  value:
    simple: entry
  required: true
  description: |
    The method for exporting the resulted file, url or entry
  playbookInputQuery: null
outputs: []
