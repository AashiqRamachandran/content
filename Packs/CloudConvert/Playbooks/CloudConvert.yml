id: CloudConvert
version: -1
name: CloudConvert
starttaskid: "0"
tasks:
  "0":
    id: "0"
    taskid: 0b8fdf08-4822-4008-8ace-f847f6212f89
    type: start
    task:
      id: 0b8fdf08-4822-4008-8ace-f847f6212f89
      version: -1
      name: ""
      iscommand: false
      brand: ""
      description: ''
    nexttasks:
      '#none#':
      - "3"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": -120
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "1":
    id: "1"
    taskid: a5ee5a2e-e411-4d26-8112-0a14b913434d
    type: regular
    task:
      description: ''
      id: a5ee5a2e-e411-4d26-8112-0a14b913434d
      version: -1
      name: CloudConvert-import
      script: '|||CloudConvert-import'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "2"
    scriptarguments:
      entry_id:
        complex:
          root: inputs.entry_id
          filters:
          - - operator: isNotEmpty
              left:
                value:
                  simple: inputs.entry_id
                iscontext: true
      file_name: {}
      url:
        complex:
          root: inputs.url
          filters:
          - - operator: isNotEmpty
              left:
                value:
                  simple: inputs.url
                iscontext: true
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": 190
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "2":
    id: "2"
    taskid: 39225273-a191-49f2-84b5-830e7d95e5e4
    type: playbook
    task:
      id: 39225273-a191-49f2-84b5-830e7d95e5e4
      version: -1
      name: GenericPolling
      description: |-
        Use this playbook as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continuously running the command in Step \#2 until the operation completes.
        The remote action should have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      playbookName: GenericPolling
      type: playbook
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "4"
    scriptarguments:
      AdditionalPollingCommandArgNames: {}
      AdditionalPollingCommandArgValues: {}
      Ids:
        simple: ${CloudConvert.Task.id}
      Interval:
        simple: "1"
      PollingCommandArgName:
        simple: task_id
      PollingCommandName:
        simple: CloudConvert-checkstatus
      Timeout:
        simple: "10"
      dt:
        simple: CloudConvert.Task(val.status != 'finished').id
    separatecontext: true
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
      max: 100
    view: |-
      {
        "position": {
          "x": 450,
          "y": 390
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "3":
    id: "3"
    taskid: f92eb9a0-6a4c-40f4-8c73-178e1b0a594d
    type: regular
    task:
      id: f92eb9a0-6a4c-40f4-8c73-178e1b0a594d
      version: -1
      name: deletecontext
      description: Delete field from context
      scriptName: DeleteContext
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "1"
    scriptarguments:
      all:
        simple: "yes"
      index: {}
      key: {}
      keysToKeep: {}
      subplaybook: {}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": 30
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "4":
    id: "4"
    taskid: 35be5e52-a197-4fb3-8a9f-dd4ed4776171
    type: regular
    task:
      description: ''
      id: 35be5e52-a197-4fb3-8a9f-dd4ed4776171
      version: -1
      name: CloudConvert-convert
      script: '|||CloudConvert-convert'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "5"
    scriptarguments:
      output_format:
        simple: ${inputs.output_format}
      task_id:
        complex:
          root: CloudConvert.Task
          filters:
          - - operator: containsString
              left:
                value:
                  simple: CloudConvert.Task.operation
                iscontext: true
              right:
                value:
                  simple: import
          accessor: id
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": 590
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "5":
    id: "5"
    taskid: c040e3ee-937c-4099-87a0-8cd9693b8e8b
    type: playbook
    task:
      id: c040e3ee-937c-4099-87a0-8cd9693b8e8b
      version: -1
      name: GenericPolling
      description: |-
        Use this playbook as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continuously running the command in Step \#2 until the operation completes.
        The remote action should have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      playbookName: GenericPolling
      type: playbook
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "6"
    scriptarguments:
      AdditionalPollingCommandArgNames: {}
      AdditionalPollingCommandArgValues: {}
      Ids:
        complex:
          root: CloudConvert.Task
          filters:
          - - operator: isEqualString
              left:
                value:
                  simple: CloudConvert.Task.operation
                iscontext: true
              right:
                value:
                  simple: convert
          accessor: id
      Interval:
        simple: "1"
      PollingCommandArgName:
        simple: task_id
      PollingCommandName:
        simple: CloudConvert-checkstatus
      Timeout:
        simple: "10"
      dt:
        simple: CloudConvert.Task(val.status!='finished').id
    separatecontext: true
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
      max: 0
    view: |-
      {
        "position": {
          "x": 450,
          "y": 770
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "6":
    id: "6"
    taskid: 6eb6e3f4-a431-48ce-85be-a5faa5d26239
    type: regular
    task:
      description: ''
      id: 6eb6e3f4-a431-48ce-85be-a5faa5d26239
      version: -1
      name: CloudConvert-export
      script: '|||CloudConvert-export'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "13"
    scriptarguments:
      export_as:
        simple: ${inputs.export_via}
      task_id:
        complex:
          root: CloudConvert.Task
          filters:
          - - operator: isEqualString
              left:
                value:
                  simple: CloudConvert.Task.operation
                iscontext: true
              right:
                value:
                  simple: convert
          accessor: id
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": 940
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "12":
    id: "12"
    taskid: 5500260b-4604-4723-84a7-cec69927ecf6
    type: playbook
    task:
      id: 5500260b-4604-4723-84a7-cec69927ecf6
      version: -1
      name: GenericPolling
      description: |-
        Use this playbook as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continuously running the command in Step \#2 until the operation completes.
        The remote action should have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      playbookName: GenericPolling
      type: playbook
      iscommand: false
      brand: ""
    scriptarguments:
      AdditionalPollingCommandArgNames:
        simple: is_entry
      AdditionalPollingCommandArgValues:
        simple: "True"
      Ids:
        complex:
          root: CloudConvert.Task
          filters:
          - - operator: containsString
              left:
                value:
                  simple: CloudConvert.Task.operation
                iscontext: true
              right:
                value:
                  simple: export
          accessor: id
      Interval:
        simple: "1"
      PollingCommandArgName:
        simple: task_id
      PollingCommandName:
        simple: CloudConvert-checkstatus
      Timeout:
        simple: "10"
      dt:
        simple: CloudConvert.Task(val.status!='finished').id
    separatecontext: false
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
      max: 100
    view: |-
      {
        "position": {
          "x": 240,
          "y": 1290
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "13":
    id: "13"
    taskid: bf200b39-bbd2-4239-8aa7-b982669cfaa2
    type: condition
    task:
      description: ''
      id: bf200b39-bbd2-4239-8aa7-b982669cfaa2
      version: -1
      name: Is the export is to war room entry
      type: condition
      iscommand: false
      brand: ""
    nexttasks:
      '#default#':
      - "14"
      "yes":
      - "12"
    separatecontext: false
    conditions:
    - label: "yes"
      condition:
      - - operator: isEqualString
          left:
            value:
              complex:
                root: inputs.export_via
            iscontext: true
          right:
            value:
              simple: war_room_entry
    view: |-
      {
        "position": {
          "x": 450,
          "y": 1115
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "14":
    id: "14"
    taskid: 64c60aa9-d708-49af-8edd-1ab95b3d7a6c
    type: playbook
    task:
      id: 64c60aa9-d708-49af-8edd-1ab95b3d7a6c
      version: -1
      name: GenericPolling
      description: |-
        Use this playbook as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continuously running the command in Step \#2 until the operation completes.
        The remote action should have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      playbookName: GenericPolling
      type: playbook
      iscommand: false
      brand: ""
    scriptarguments:
      AdditionalPollingCommandArgNames: {}
      AdditionalPollingCommandArgValues: {}
      Ids:
        complex:
          root: CloudConvert.Task
          filters:
          - - operator: containsString
              left:
                value:
                  simple: CloudConvert.Task.operation
                iscontext: true
              right:
                value:
                  simple: export
          accessor: id
      Interval:
        simple: "1"
      PollingCommandArgName:
        simple: task_id
      PollingCommandName:
        simple: CloudConvert-checkstatus
      Timeout:
        simple: "10"
      dt:
        simple: CloudConvert.Task(val.status!='finished').id
    separatecontext: false
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
      max: 100
    view: |-
      {
        "position": {
          "x": 660,
          "y": 1290
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
view: |-
  {
    "linkLabelsPosition": {},
    "paper": {
      "dimensions": {
        "height": 1505,
        "width": 800,
        "x": 240,
        "y": -120
      }
    }
  }
inputs:
- key: url
  value: {}
  required: false
  description: This is the url of the imported file
  playbookInputQuery:
- key: entry_id
  value: {}
  required: false
  description: This is the entry id of the imported file
  playbookInputQuery:
- key: output_format
  value: {}
  required: true
  description: |
    This is the desired output format
  playbookInputQuery:
- key: export_via
  value: {}
  required: true
  description: |
    The method for exporting the resulted file, url or war_room_entry
  playbookInputQuery:
outputs: []
tests:
- c951568b-7af5-46e8-8cff-83b799c05a75
fromversion: 6.0.0
description: Use this playbook in order to conduct a file conversion using CloudConvert
