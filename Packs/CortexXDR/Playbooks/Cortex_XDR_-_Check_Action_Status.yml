id: Cortex XDR - Check Action Status
version: -1
name: Cortex XDR - Check Action Status
description: "Playbook that takes action id and checks the action status. \nPlease\
  \ enter action id you want to know itâ€™s status."
starttaskid: "0"
tasks:
  "0":
    id: "0"
    taskid: 66e5f8f6-bf2c-4ee9-85e4-f442eb366c4e
    type: start
    task:
      id: 66e5f8f6-bf2c-4ee9-85e4-f442eb366c4e
      version: -1
      name: ""
      iscommand: false
      brand: ""
      description: ''
    nexttasks:
      '#none#':
      - "2"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 265,
          "y": 50
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "1":
    id: "1"
    taskid: 4fdb2092-79ce-427f-8694-bc2402f1866d
    type: regular
    task:
      id: 4fdb2092-79ce-427f-8694-bc2402f1866d
      version: -1
      name: xdr-action-status-get
      description: Retrieve the status of the requested actions according to the action
        ID.
      script: Cortex XDR - IR|||xdr-action-status-get
      type: regular
      iscommand: true
      brand: Cortex XDR - IR
    nexttasks:
      '#none#':
      - "3"
    scriptarguments:
      action_id:
        simple: ${inputs.action_id}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 50,
          "y": 720
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "2":
    id: "2"
    taskid: 76b7b748-14d0-4be4-86f1-8b892ddbdecd
    type: playbook
    task:
      id: 76b7b748-14d0-4be4-86f1-8b892ddbdecd
      version: -1
      name: GenericPolling
      description: |-
        Use this playbook as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continuously running the command in Step \#2 until the operation completes.
        The remote action should have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      playbookName: GenericPolling
      type: playbook
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "6"
    scriptarguments:
      AdditionalPollingCommandArgNames: {}
      AdditionalPollingCommandArgValues: {}
      Ids:
        simple: ${inputs.action_id}
      Interval:
        simple: "1"
      PollingCommandArgName:
        simple: action_id
      PollingCommandName:
        simple: xdr-action-status-get
      Timeout:
        simple: "10"
      dt:
        simple: PaloAltoNetworksXDR.getActionStatus(val.status != "CANCELLED" || val.status
          != "ABORTED" || val.status != "EXPIRED" || val.status != "COMPLETED_PARTIAL"
          || val.status != "COMPLETED_SUCCESSFULLY" || val.status != "FAILED" || val.status
          != "TIMEOUT")
    separatecontext: true
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
      max: 100
    view: |-
      {
        "position": {
          "x": 265,
          "y": 195
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "3":
    id: "3"
    taskid: c4b7c36b-9e3f-4dc7-8ea1-2ab3893a80b1
    type: title
    task:
      id: c4b7c36b-9e3f-4dc7-8ea1-2ab3893a80b1
      version: -1
      name: Done
      type: title
      iscommand: false
      brand: ""
      description: ''
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 50,
          "y": 895
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "4":
    id: "4"
    taskid: a7ba2d63-ee1f-48df-8aa4-879d48483965
    type: condition
    task:
      id: a7ba2d63-ee1f-48df-8aa4-879d48483965
      version: -1
      name: Action status is final
      description: We should check if the action is at its final status or not.
      type: condition
      iscommand: false
      brand: ""
    nexttasks:
      '#default#':
      - "5"
      "yes":
      - "1"
    separatecontext: false
    conditions:
    - label: "yes"
      condition:
      - - operator: inList
          left:
            value:
              simple: PaloAltoNetworksXDR.getActionStatus(val.status).status
            iscontext: true
          right:
            value:
              simple: CANCELLED,ABORTED,EXPIRED,COMPLETED_PARTIAL,COMPLETED_SUCCESSFULLY,FAILED,TIMEOUT
    view: |-
      {
        "position": {
          "x": 265,
          "y": 545
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "5":
    id: "5"
    taskid: 2f8ad41a-f5cb-41c5-8f81-dc0d4bd2bd86
    type: regular
    task:
      id: 2f8ad41a-f5cb-41c5-8f81-dc0d4bd2bd86
      version: -1
      name: Print Error message
      description: Prints an error entry with a given message
      scriptName: PrintErrorEntry
      type: regular
      iscommand: false
      brand: ""
    scriptarguments:
      message:
        simple: The status of this action still not final
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 480,
          "y": 720
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "6":
    id: "6"
    taskid: dd7d3789-b6c2-4019-8365-b672923064fd
    type: regular
    task:
      id: dd7d3789-b6c2-4019-8365-b672923064fd
      version: -1
      name: xdr-action-status-get
      description: Retrieve the status of the requested actions according to the action
        ID.
      script: Cortex XDR - IR|||xdr-action-status-get
      type: regular
      iscommand: true
      brand: Cortex XDR - IR
    nexttasks:
      '#none#':
      - "4"
    scriptarguments:
      action_id:
        simple: ${inputs.action_id}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 265,
          "y": 370
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
view: |-
  {
    "linkLabelsPosition": {},
    "paper": {
      "dimensions": {
        "height": 910,
        "width": 810,
        "x": 50,
        "y": 50
      }
    }
  }
inputs:
- key: action_id
  value: {}
  required: false
  description: Action ID of the specific request.
  playbookInputQuery:
outputs: []
fromversion: 5.0.0
tests:
- Test XDR Playbook
- Cortex XDR - IOC - Test
